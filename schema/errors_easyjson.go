// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD31a5a85DecodeGithubComBor3hamRejaSchema(in *jlexer.Lexer, out *ErrorSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]map[string]interface{}, 0, 8)
					} else {
						out.Errors = []map[string]interface{}{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v1 = make(map[string]interface{})
						} else {
							v1 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v2 interface{}
							if m, ok := v2.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v2.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v2 = in.Interface()
							}
							(v1)[key] = v2
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Errors = append(out.Errors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComBor3hamRejaSchema(out *jwriter.Writer, in ErrorSet) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"errors\":")
	if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in.Errors {
			if v3 > 0 {
				out.RawByte(',')
			}
			if v4 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v5First := true
				for v5Name, v5Value := range v4 {
					if !v5First {
						out.RawByte(',')
					}
					v5First = false
					out.String(string(v5Name))
					out.RawByte(':')
					if m, ok := v5Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v5Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v5Value))
					}
				}
				out.RawByte('}')
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComBor3hamRejaSchema(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComBor3hamRejaSchema(l, v)
}
