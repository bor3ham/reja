// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89db8b87DecodeGithubComBor3hamRejaSchema(in *jlexer.Lexer, out *InstancePointer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89db8b87EncodeGithubComBor3hamRejaSchema(out *jwriter.Writer, in InstancePointer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstancePointer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89db8b87EncodeGithubComBor3hamRejaSchema(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstancePointer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89db8b87DecodeGithubComBor3hamRejaSchema(l, v)
}
