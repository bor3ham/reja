// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7d177735DecodeGithubComBor3hamRejaSchema(in *jlexer.Lexer, out *Page) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]interface{})
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Metadata)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "links":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Links = make(map[string]*string)
				} else {
					out.Links = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(string)
						}
						*v2 = string(in.String())
					}
					(out.Links)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]interface{}, 0, 4)
					} else {
						out.Data = []interface{}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.Data = append(out.Data, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "included":
			if in.IsNull() {
				in.Skip()
				out.Included = nil
			} else {
				if out.Included == nil {
					out.Included = new([]interface{})
				}
				if in.IsNull() {
					in.Skip()
					*out.Included = nil
				} else {
					in.Delim('[')
					if *out.Included == nil {
						if !in.IsDelim(']') {
							*out.Included = make([]interface{}, 0, 4)
						} else {
							*out.Included = []interface{}{}
						}
					} else {
						*out.Included = (*out.Included)[:0]
					}
					for !in.IsDelim(']') {
						var v4 interface{}
						if m, ok := v4.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v4.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v4 = in.Interface()
						}
						*out.Included = append(*out.Included, v4)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeGithubComBor3hamRejaSchema(out *jwriter.Writer, in Page) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"meta\":")
	if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.Metadata {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			if m, ok := v5Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v5Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v5Value))
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"links\":")
	if in.Links == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in.Links {
			if !v6First {
				out.RawByte(',')
			}
			v6First = false
			out.String(string(v6Name))
			out.RawByte(':')
			if v6Value == nil {
				out.RawString("null")
			} else {
				out.String(string(*v6Value))
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in.Data {
			if v7 > 0 {
				out.RawByte(',')
			}
			if m, ok := v8.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v8.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v8))
			}
		}
		out.RawByte(']')
	}
	if in.Included != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"included\":")
		if in.Included == nil {
			out.RawString("null")
		} else {
			if *in.Included == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v9, v10 := range *in.Included {
					if v9 > 0 {
						out.RawByte(',')
					}
					if m, ok := v10.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v10.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v10))
					}
				}
				out.RawByte(']')
			}
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Page) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeGithubComBor3hamRejaSchema(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Page) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeGithubComBor3hamRejaSchema(l, v)
}
